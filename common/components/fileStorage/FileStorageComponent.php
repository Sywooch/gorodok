<?php
/**
 * Created by DENOLL LLC http://denoll.ru.
 * User:  Denis Oleynikov
 * Email: denoll@denoll.ru
 * Date: 11.06.2016
 * Time: 6:10
 */

namespace common\components\fileStorage;

use common\widgets\Arrays;
use yii\base\Component;
use yii\base\Model;
use yii\web\UploadedFile;
use yii\helpers\Url;
use yii\db\ActiveRecord;
use yii\imagine\Image;
use Imagine\Gd;
use Imagine\Image\Box;
use Imagine\Image\BoxInterface;

/**
 * Class FileStorageComponent
 * @package common\components\fileStorage
 * @author denoll <denoll@denoll.ru>
 *
 * @param Model $model
 * @param UploadedFile $file
 * @param string $file_dir
 * @param string $file_url
 * @param string $file_name
 * @param string $directory
 *
 * @param string $image_height
 * @param string $image_width
 * @param string $image_quality
 */
class FileStorageComponent extends Component
{
	public $model;
	public $directory;
	public $file;
	public $file_dir;
	public $file_url;
	public $file_name;
	public $image_height = 150;
	public $image_width = 150;
	public $image_quality = 70;


	public function init()
	{
		parent::init(); // TODO: Change the autogenerated stub
	}

	/**
	 * @return mixed
	 */
	public function hello()
	{
		return $this->fileDir();
	}

	/**
	 * @param ActiveRecord $model
	 * @param $directory
	 * @return null|string
	 */
	public function uploadFile(ActiveRecord $model, $directory)
	{
		$model->{$this->file} = UploadedFile::getInstance($model, $this->file);
		if(!empty($model->{$this->file})){
			if ($model->validate()) {
				$img_name = 'lg_'.\Yii::$app->security->generateRandomString(12) . '.' . $model->{$this->file}->extension;
				$model->{$this->file}->saveAs($this->fileDir($directory).$img_name);
				$model->{$this->file} = null;
				return $img_name;
			} else {
				return null;
			}
		}/*elseif(!$model->isNewRecord && !empty($model->{$this->file_name})){
			$this->deleteFile($model->{$this->file_name});
			$model->{$this->file_name} = null;
		}*/
	}

	/**
	 * @param array $file_name
	 */
	public function deleteFile($file_name)
	{
		if (!empty($file_name)) {
			$file = $this->fileDir($this->directory, $file_name);
			if (file_exists($file)) {
				unlink($file);
			}
		}
	}

	/**
	 * @param array $file_names
	 */
	public function deleteFiles(Array $file_names)
	{
		if (is_array($file_names)) {
			foreach ($file_names as $file_name) {
				if (!empty($file_name)) {
					$file = $this->fileDir($this->directory, $file_name);
					if (file_exists($file)) {
						unlink($file);
					}
				}
			}
		}
	}

	/**
	 * @param null $name
	 * @param null $directory
	 * @return string
	 */
	public function fileDir($directory = null, $name = null)
	{
		if (!empty($name) && !empty($directory)) {
			$path = Url::to($this->file_dir . DIRECTORY_SEPARATOR . $directory . DIRECTORY_SEPARATOR . $name);
		} elseif (empty($name) && !empty($directory)) {
			$path = Url::to($this->file_dir . DIRECTORY_SEPARATOR . $directory . DIRECTORY_SEPARATOR);
		} elseif (!empty($name) && empty($directory)) {
			$path = Url::to($this->file_dir . DIRECTORY_SEPARATOR . $name);
		} else {
			$path = Url::to($this->file_dir . DIRECTORY_SEPARATOR);
		}
		return $path;
	}

	/**
	 * @param null $name
	 * @param null $directory
	 * @return string
	 */
	public function fileUrl($directory = null, $name = null)
	{
		if (!empty($name) && !empty($directory)) {
			$path = Url::to($this->file_url . DIRECTORY_SEPARATOR . $directory . DIRECTORY_SEPARATOR . $name);
		} elseif (empty($name) && !empty($directory)) {
			$path = Url::to($this->file_url . DIRECTORY_SEPARATOR . $directory . DIRECTORY_SEPARATOR);
		} elseif (!empty($name) && empty($directory)) {
			$path = Url::to($this->file_url . DIRECTORY_SEPARATOR . $name);
		} else {
			$path = Url::to($this->file_url . DIRECTORY_SEPARATOR);
		}
		return $path;
	}

}